/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package crl

import (
	"crypto/x509"
	"encoding/pem"
	"strings"
	"testing"
)

var revokedChain = `-----BEGIN CERTIFICATE-----
MIIGgDCCBWigAwIBAgIJeR08ECAK5ENVMA0GCSqGSIb3DQEBCwUAMIH9MQswCQYD
VQQGEwJFUzEiMCAGCSqGSIb3DQEJARYTaW5mb0BjYW1lcmZpcm1hLmNvbTFDMEEG
A1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBhZGRyZXNzIGF0IHd3dy5jYW1lcmZp
cm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJQTgyNzQzMjg3MSIwIAYDVQQLExlo
dHRwOi8vd3d3LmNhbWVyZmlybWEuY29tMRkwFwYDVQQKExBBQyBDYW1lcmZpcm1h
IFNBMTIwMAYDVQQDEylBQyBDYW1lcmZpcm1hIEV4cHJlc3MgQ29ycG9yYXRlIFNl
cnZlciB2MzAeFw0xODAxMTYxNzMxNTdaFw0xOTAxMTYxNzMxNTdaMIGFMQ8wDQYD
VQQHDAZNQURSSUQxEjAQBgNVBAUTCUE4Mjc0MzI4NzERMA8GA1UECwwIU0lTVEVN
QVMxGzAZBgNVBAoMEkFDIENBTUVSRklSTUEgUy5BLjEhMB8GA1UEAwwYc2VydmVy
MXJ2LmNhbWVyZmlybWEuY29tMQswCQYDVQQGEwJFUzCCASIwDQYJKoZIhvcNAQEB
BQADggEPADCCAQoCggEBAKnfHcUin5FHWPvxr6XipBkpsmi3DmMHZw7xODk9R9Ct
g+8wtO9mrwJiVFVIN2z4s2ZUBFGN5mKpv38NY54aon2HLrQYzonlPmCxBXrZvN3n
ngc1G7UY8YURS4YiNRs1dym+6YZ3m9Mt83pnhXoqLzXL8mo4St76c7WXGUH4uYqd
euKz3oSuRU56M6QIVQ5oskTORmiAO04OA2wJuCCgYWSCl9Va25eyATuz4KattCQS
pGxCwbbFe2WlM6LP8MCCBL3vovJ5khNhkHCbXeuSqFwwOI42wCd6hVul7i6JSx2s
lVIi98Xrh64quJE++86Gzkki8IrreYCVRtncg05cLnkCAwEAAaOCAncwggJzMAwG
A1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMB
BggrBgEFBQcDAjAdBgNVHQ4EFgQUDhmMm9Yjx6J8NrurTemugS3jlaEwEwYKKwYB
BAHWeQIEAgQFBIECAAAwcQYIKwYBBQUHAQEEZTBjMDkGCCsGAQUFBzAChi1odHRw
Oi8vd3d3LmNhbWVyZmlybWEuY29tL2NlcnRzL0NNRkVDU192My5jcnQwJgYIKwYB
BQUHMAGGGmh0dHA6Ly9vY3NwLmNhbWVyZmlybWEuY29tMIGrBgNVHSMEgaMwgaCA
FApKwMqYEu+XWd33pK+wFKQ5rq5KoYGEpIGBMH8xCzAJBgNVBAYTAkVVMScwJQYD
VQQKEx5BQyBDYW1lcmZpcm1hIFNBIENJRiBBODI3NDMyODcxIzAhBgNVBAsTGmh0
dHA6Ly93d3cuY2hhbWJlcnNpZ24ub3JnMSIwIAYDVQQDExlDaGFtYmVycyBvZiBD
b21tZXJjZSBSb290ggEKMGgGA1UdHwRhMF8wLaAroCmGJ2h0dHA6Ly9jcmwuY2Ft
ZXJmaXJtYS5jb20vY21mZWNzX3YzLmNybDAuoCygKoYoaHR0cDovL2NybDEuY2Ft
ZXJmaXJtYS5jb20vY21mZWNzX3YzLmNybDAjBgNVHREEHDAaghhzZXJ2ZXIxcnYu
Y2FtZXJmaXJtYS5jb20wUAYDVR0gBEkwRzA7BgwrBgEEAYGHLgoLAgEwKzApBggr
BgEFBQcCARYdaHR0cHM6Ly9wb2xpY3kuY2FtZXJmaXJtYS5jb20wCAYGZ4EMAQIC
MA0GCSqGSIb3DQEBCwUAA4IBAQABuywMxX+pctDzlkUOfM2dVbiclB8kSq2VVmZr
a993pe2StUR0PPsPA87Wp3oIvqQ4YHfD2I50sJXdN8Ykb0sXfsmiNiR5m+6SHMvM
CdMCdPBf40xHMa8y90mfHuoI18ofJwR5jBDMguX9wkvD1iOyzDCgIrUaWelOmKm/
azgCLmsQFwbQCGEQHSKi0kzu+zl1BVHqDHEoby2L7TT1Pj/Uwsp3LoNBj5Pp4V1I
f5skzOOZLCmmuQHxwgWOiv8+NlRNLUCK/UxmKQ72m7kn9Sz/ixT5KrK+nsL+baPF
KAuBuIEkBGnfdI/Jgix6523Uz5XmBVIJjDOS+6w8MLbELxG6
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIGXDCCBUSgAwIBAgIBCjANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJFVTEn
MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL
ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMg
b2YgQ29tbWVyY2UgUm9vdDAeFw0wOTAxMjAxMDE4MTJaFw0xOTAxMTgxMDE4MTJa
MIH9MQswCQYDVQQGEwJFUzEiMCAGCSqGSIb3DQEJARYTaW5mb0BjYW1lcmZpcm1h
LmNvbTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBhZGRyZXNzIGF0IHd3
dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJQTgyNzQzMjg3MSIw
IAYDVQQLExlodHRwOi8vd3d3LmNhbWVyZmlybWEuY29tMRkwFwYDVQQKExBBQyBD
YW1lcmZpcm1hIFNBMTIwMAYDVQQDEylBQyBDYW1lcmZpcm1hIEV4cHJlc3MgQ29y
cG9yYXRlIFNlcnZlciB2MzCCASAwDQYJKoZIhvcNAQEBBQADggENADCCAQgCggEB
AIg1c+SE9a2pYYPrVGr9c+aEjvoUncE2WhlZhuKzfxwF5YSV1UfGmPupAgy1yILQ
cTUd2M2bqCzInVZ0aLJQ5MmmG0dfzq4EFh/apTyTMcNrfoN9ocafuEwCYxLAyhh9
JHqRyOzkjWLpyI2Xw1w5vTWESGVNDVcAm5eEMIGSnWsLqjOJaXd4QwXvy4CQi//j
FRIZD2nP6xyJlLHdYxpbfETAqyea4loU+E0oy5PxJQlB9xE7BqmmpviV2SHFTPd/
VnX9/AAJPOM0bEvVCauDojwLCqp+8N+rEEaAnO8U2c4N3lZVuRXkc9ykg7hSkABh
cMDOyMdfS8aeGNdNG7lMzFECAQOjggJkMIICYDASBgNVHRMBAf8ECDAGAQH/AgEC
MG4GA1UdHwRnMGUwMKAuoCyGKmh0dHA6Ly9jcmwuY2FtZXJmaXJtYS5jb20vY2hh
bWJlcnNyb290LmNybDAxoC+gLYYraHR0cDovL2NybDEuY2FtZXJmaXJtYS5jb20v
Y2hhbWJlcnNyb290LmNybDAdBgNVHQ4EFgQUCkrAypgS75dZ3fekr7AUpDmurkow
dQYIKwYBBQUHAQEEaTBnMD0GCCsGAQUFBzAChjFodHRwOi8vd3d3LmNhbWVyZmly
bWEuY29tL2NlcnRzL1JPT1QtQ0hBTUJFUlMuY3J0MCYGCCsGAQUFBzABhhpodHRw
Oi8vb2NzcC5jYW1lcmZpcm1hLmNvbTCBqwYDVR0jBIGjMIGggBTjlPWxTenboSlb
V4tNdgZ24dGiiqGBhKSBgTB/MQswCQYDVQQGEwJFVTEnMCUGA1UEChMeQUMgQ2Ft
ZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQLExpodHRwOi8vd3d3LmNo
YW1iZXJzaWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9v
dIIBADAOBgNVHQ8BAf8EBAMCAQYwHgYDVR0RBBcwFYETaW5mb0BjYW1lcmZpcm1h
LmNvbTAnBgNVHRIEIDAegRxjaGFtYmVyc3Jvb3RAY2hhbWJlcnNpZ24ub3JnMD0G
A1UdIAQ2MDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRwOi8vcG9saWN5LmNh
bWVyZmlybWEuY29tMA0GCSqGSIb3DQEBBQUAA4IBAQAw33XPOfeYIQuMozpM10jQ
4QtoJC+GeZUuAuMw0Yg+Klhipr+gOx6nHmpnNptChWcad97BZdY1xQPcGUmHXHBg
E1QOMDE5e7lakHyhs2su0QK6fFTFC+xhWr5gGY9fxS6JFwzOrYIEV9hktMl9Z/K0
/Z5beZ4vocqq47R/R3pem5d1YSGviayQrjKsWdTUZTk57p+oKb3QhuRhRS80tOTT
9xmhmt3YwUUT+FZhBPPfrlZtJb3PDNVCjgYyBynDj7VjIsfGxZgogisO+84LhEp2
UcXy2I2PbqLy7XRzPRxJKcRgbooFzC9iuY5ZcFJB9JLqo57rtZimNjNwLoO8sifX
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIEvTCCA6WgAwIBAgIBADANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJFVTEn
MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL
ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMg
b2YgQ29tbWVyY2UgUm9vdDAeFw0wMzA5MzAxNjEzNDNaFw0zNzA5MzAxNjEzNDRa
MH8xCzAJBgNVBAYTAkVVMScwJQYDVQQKEx5BQyBDYW1lcmZpcm1hIFNBIENJRiBB
ODI3NDMyODcxIzAhBgNVBAsTGmh0dHA6Ly93d3cuY2hhbWJlcnNpZ24ub3JnMSIw
IAYDVQQDExlDaGFtYmVycyBvZiBDb21tZXJjZSBSb290MIIBIDANBgkqhkiG9w0B
AQEFAAOCAQ0AMIIBCAKCAQEAtzZV5aVdGDDg2olUkfzIx1L4L1DZ77F1c2VHfRtb
unXF/KGIJPov7coISjlUxFF6tdpg6jg8gbLL8bvZkSM/SAFwdakFKq0fcfPJVD0d
BmpAPrMMhe5cG3nCYsS4No41XQEMIwRHNaqbYE6gZj3LJgqcQKH0XZi/caulAGgq
7YN6D6IUtdQis4CwPAxaUWktWBiP7Zme8a7ileb2R6jWDA+wWFjbw2Y3npuRVDM3
0pQcakjJyfKl2qUMI/cjDpwyVV5xnIQFUZot/eZOKjRa3spAN2cMVCFVd9oKDMyX
roDclDZK9D7ONhMeU+SsTjoF7Nuucpw4i9A5O4kKPnf+dQIBA6OCAUQwggFAMBIG
A1UdEwEB/wQIMAYBAf8CAQwwPAYDVR0fBDUwMzAxoC+gLYYraHR0cDovL2NybC5j
aGFtYmVyc2lnbi5vcmcvY2hhbWJlcnNyb290LmNybDAdBgNVHQ4EFgQU45T1sU3p
26EpW1eLTXYGduHRooowDgYDVR0PAQH/BAQDAgEGMBEGCWCGSAGG+EIBAQQEAwIA
BzAnBgNVHREEIDAegRxjaGFtYmVyc3Jvb3RAY2hhbWJlcnNpZ24ub3JnMCcGA1Ud
EgQgMB6BHGNoYW1iZXJzcm9vdEBjaGFtYmVyc2lnbi5vcmcwWAYDVR0gBFEwTzBN
BgsrBgEEAYGHLgoDATA+MDwGCCsGAQUFBwIBFjBodHRwOi8vY3BzLmNoYW1iZXJz
aWduLm9yZy9jcHMvY2hhbWJlcnNyb290Lmh0bWwwDQYJKoZIhvcNAQEFBQADggEB
AAxBl8IahsAifJ/7kPMa0QOx7xP5IV8EnNrJpY0nbJaHkb5BkAFyk+cefV/2icZd
p0AJPaxJRUXcLo0waLIJuvvDL8y6C98/d3tGfToSJI6WjzwFCm/SlCgdbQzALogi
1djPHRPH8EjX1wWnz8dHnjs8NMiAT9QUu/wNUPf6s+xCX6ndbcj0dc97wXImsQEc
XCz9ek60AcUFV7nnPKoF2YjpB0ZBzu9Bga5Y34OirsrXdx/nADydb47kMgkdTXg0
eDQ8lJsm7U9xxhl6vSAiSFr+S30Dt+dYvsYyTnQeaN2oaFuzPu5ifdmA6Ap1erfu
tGWaIZDgqtCYvDi1czyL+Nw=
-----END CERTIFICATE-----`

func parseChain(chain string) (certs []*x509.Certificate) {
	chain = strings.TrimSpace(chain)
	for _, b := range strings.SplitAfter(chain, "-----END CERTIFICATE-----") {
		if len(b) == 0 {
			continue
		}
		block, rest := pem.Decode([]byte(b))
		if len(rest) != 0 {
			panic("dangling info on a certificate: " + string(rest))
		}
		cert, err := x509.ParseCertificate(block.Bytes)
		if err != nil {
			panic(err)
		}
		certs = append(certs, cert)
	}
	return
}

func TestRevoked(t *testing.T) {
	crls := VerifyChain(parseChain(revokedChain))
	leaf := crls[0]
	for _, status := range leaf {
		if !status.Revoked {
			t.Fatalf("wanted the leaf to be revoked, got good")
		}
	}
	for _, CA := range crls[1:] {
		for _, status := range CA {
			if status.Revoked {
				t.Fatalf("wanted the intermediates and root be good, revoked")
			}
		}
	}
}
